#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQSTUFF
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CTSDATABASE")]
	public partial class CustomerDBMLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEMPLOYEE(EMPLOYEE instance);
    partial void UpdateEMPLOYEE(EMPLOYEE instance);
    partial void DeleteEMPLOYEE(EMPLOYEE instance);
    #endregion
		
		public CustomerDBMLDataContext() : 
				base(global::LINQSTUFF.Properties.Settings.Default.CTSDATABASEConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CustomerDBMLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CustomerDBMLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CustomerDBMLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CustomerDBMLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this.GetTable<EMPLOYEE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _CustomerName;
		
		private int _CustomerAmount;
		
		private string _CustomerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerAmountChanging(int value);
    partial void OnCustomerAmountChanged();
    partial void OnCustomerTypeChanging(string value);
    partial void OnCustomerTypeChanged();
    #endregion
		
		public Customer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAmount", DbType="Int NOT NULL")]
		public int CustomerAmount
		{
			get
			{
				return this._CustomerAmount;
			}
			set
			{
				if ((this._CustomerAmount != value))
				{
					this.OnCustomerAmountChanging(value);
					this.SendPropertyChanging();
					this._CustomerAmount = value;
					this.SendPropertyChanged("CustomerAmount");
					this.OnCustomerAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string CustomerType
		{
			get
			{
				return this._CustomerType;
			}
			set
			{
				if ((this._CustomerType != value))
				{
					this.OnCustomerTypeChanging(value);
					this.SendPropertyChanging();
					this._CustomerType = value;
					this.SendPropertyChanged("CustomerType");
					this.OnCustomerTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EMPLOYEE")]
	public partial class EMPLOYEE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EMPID;
		
		private string _EMPNAME;
		
		private string _EMPDESG;
		
		private System.Nullable<int> _DEPTID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMPIDChanging(int value);
    partial void OnEMPIDChanged();
    partial void OnEMPNAMEChanging(string value);
    partial void OnEMPNAMEChanged();
    partial void OnEMPDESGChanging(string value);
    partial void OnEMPDESGChanged();
    partial void OnDEPTIDChanging(System.Nullable<int> value);
    partial void OnDEPTIDChanged();
    #endregion
		
		public EMPLOYEE()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EMPID
		{
			get
			{
				return this._EMPID;
			}
			set
			{
				if ((this._EMPID != value))
				{
					this.OnEMPIDChanging(value);
					this.SendPropertyChanging();
					this._EMPID = value;
					this.SendPropertyChanged("EMPID");
					this.OnEMPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPNAME", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string EMPNAME
		{
			get
			{
				return this._EMPNAME;
			}
			set
			{
				if ((this._EMPNAME != value))
				{
					this.OnEMPNAMEChanging(value);
					this.SendPropertyChanging();
					this._EMPNAME = value;
					this.SendPropertyChanged("EMPNAME");
					this.OnEMPNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPDESG", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EMPDESG
		{
			get
			{
				return this._EMPDESG;
			}
			set
			{
				if ((this._EMPDESG != value))
				{
					this.OnEMPDESGChanging(value);
					this.SendPropertyChanging();
					this._EMPDESG = value;
					this.SendPropertyChanged("EMPDESG");
					this.OnEMPDESGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPTID", DbType="Int")]
		public System.Nullable<int> DEPTID
		{
			get
			{
				return this._DEPTID;
			}
			set
			{
				if ((this._DEPTID != value))
				{
					this.OnDEPTIDChanging(value);
					this.SendPropertyChanging();
					this._DEPTID = value;
					this.SendPropertyChanged("DEPTID");
					this.OnDEPTIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
